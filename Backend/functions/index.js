const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

const db = admin.firestore();

// init express server
const express = require('express');
const app = express();

// firebase config
const firebaseConfig = {
    apiKey: "AIzaSyDenJlzVzL0LmDGNhZ6eH6TlZAmqFT4eJU",
    authDomain: "twirrer-app.firebaseapp.com",
    databaseURL: "https://twirrer-app.firebaseio.com",
    projectId: "twirrer-app",
    storageBucket: "twirrer-app.appspot.com",
    messagingSenderId: "714072408637",
    appId: "1:714072408637:web:eb709d07ebb91959a42054",
    measurementId: "G-7B0TRRWSJW"
};

// firebase init
const firebase = require('firebase');
firebase.initializeApp(firebaseConfig);

// get all posts
app.get('/getPosts', (req, res) => {
    db.collection('posts').orderBy('createdAt', 'desc').get()
        .then(data => {
            let posts = [];
            data.forEach(doc => {
                posts.push({
                    userId: doc.data().userId,
                    userName: doc.data().userName,
                    userAvatar: doc.data().userAvatar,
                    postId: doc.id,
                    postContent: doc.data().postContent,
                    postImage: doc.data().postImage,
                    createdAt: doc.data().createdAt
                });
            });
            return res.json(posts);
        })
        .catch((e) => console.error(e));
})

/**
 * usage: authorize the user - check if this user is authorized and has token, 
 *          also check that this token was generated by our system (firebase) or not.
 */
const FirebaseAuth = (req, res, next) => {
    let idToken;
    if (
        req.headers.authorization &&
        req.headers.authorization.startsWith('Bearer ')
    ) {
        idToken = req.headers.authorization.split('Bearer ')[1];
    } else {
        console.error('No token found');
        return res.status(403).json({
            error: 'Unauthorized'
        });
    }

    admin
        .auth()
        .verifyIdToken(idToken)
        .then((decodedToken) => {
            req.user = decodedToken;
            return db
                .collection('users')
                .where('userId', '==', req.user.uid)
                .limit(1)
                .get();
        })
        .then((data) => {
            req.user.userName = data.docs[0].data().userName;
            return next();
        })
        .catch((err) => {
            console.error('Error while verifying token ', err);
            return res.status(403).json(err);
        });
}

// add new post
// Hint: based on the retrieved value of 'FirebaseAuth', if user not authorized all this route will not work.
app.post('/addPost', FirebaseAuth, (req, res) => {

    // if you get here, that is means, that you are authorized user.

    const post = {
        // added automatically
        userId: req.user.uid,
        userName: req.user.userName,
        createdAt: new Date().toISOString(),

        // received from user   
        userAvatar: req.body.userAvatar,
        postContent: req.body.postContent,
        postImage: req.body.postImage
    }

    db.collection('posts').add(post)
        .then((doc) => {
            res.json({
                message: `post ${doc.id} added successfully!`
            })
        })
        .catch((e) => {
            res.status(500).json({
                error: 'something went wrong!'
            })
            console.error(e)
        });
})

// helper functions

const isEmail = (email) => {
    const emailRegEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if (email.match(emailRegEx)) return true
    else return false
}

const isEmpty = (string) => {
    if (string.trim() === "") return true; // string is either empty or has space only 
    else return false
}

// Signup route
app.post('/signup', (req, res) => {
    const newUser = {
        userName: req.body.userName,
        email: req.body.email,
        password: req.body.password,
        confirmPassword: req.body.confirmPassword
    }

    let errors = {}

    if (isEmpty(newUser.email)) {
        errors.email = 'Must not be empty'
    } else if (!isEmail(newUser.email)) {
        errors.email = 'Must be a valid email'
    }

    if (isEmpty(newUser.password) || newUser.password.length < 6) errors.password = 'Must be 6 char or more'

    if (newUser.password !== newUser.confirmPassword) errors.confirmPassword = 'Passwords must be match'

    if (isEmpty(newUser.userName)) errors.userName = 'Must not be empty'

    if (Object.keys(errors).length > 0) {
        // there is error
        return res.status(400).json(errors)
    }

    let userIdToken, userId;
    // to make user name unique
    db.doc(`/users/${newUser.userName}`).get()
        .then(doc => {
            if (doc.exists) {
                // code 400 => client error
                return res.status(400).json({
                    userName: 'this user name is already taken'
                })
            } else {
                return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password)
            }
        })
        .then(data => { // if you get here, means the user was created 
            // get access token of the user that has been created
            userId = data.user.uid;
            return data.user.getIdToken();
        })
        .then(token => {
            // return token
            userIdToken = token
            const userCredential = {
                userName: newUser.userName,
                email: newUser.email,
                createdAt: new Date().toISOString(),
                userId
            }
            // create new record to this new user in database in users table
            return db.doc(`/users/${newUser.userName}`).set(userCredential);
        })
        .then(() => {
            return res.status(201).json({
                "userToken": userIdToken
            });
        })
        .catch(error => {
            console.log(error);
            if (error.code === "auth/email-already-in-use") {
                return res.status(400).json({
                    email: 'Email is already in use'
                })
            } else {
                return res.status(500).json({
                    error: error.code
                })
            }
        })

})

// login route
app.post('/login', (req, res) => {
    const user = {
        email: req.body.email,
        password: req.body.password
    }

    let errors = {}

    if (isEmpty(user.email)) errors.email = 'Must not be empty'
    if (isEmpty(user.password)) errors.password = 'Must not be empty'

    if (Object.keys(errors).length > 0) {
        // there is error
        return res.status(400).json(errors)
    }

    firebase.auth().signInWithEmailAndPassword(user.email, user.password)
        .then(data => {
            return data.user.getIdToken();
        })
        .then(token => {
            return res.status(201).json({
                "userToken": token
            });
        })
        .catch(error => {
            console.log(error);
            if (error.code === "auth/wrong-password") {
                // code 403 => unauthorized user
                return res.status(403).json({
                    "general": "Wrong credentials, please try again."
                })
            } else return res.status(500).json({
                error: error.code
            })
        })
})

// to tell firebase that app is the container of all routes
exports.api = functions.region('europe-west3').https.onRequest(app);